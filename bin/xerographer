#!/usr/bin/env php
<?php

declare(strict_types=1);

namespace Jascha030;

use ArrayIterator;
use Exception;
use Iterator;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Output\ConsoleOutput;
use function Jascha030\Xerox\Helpers\container;

/**
 * Loader loads autoload.php, locally or from $HOME/.composer/vendor/autoload.php.
 */
(static function () {
    require_once(static function (Iterator $paths): ?string {
        foreach ($paths as $path) {
            if (file_exists($path = sprintf('%s%s', dirname(__DIR__), $path))) {
                return $path;
            }
        }

        return null;
    })(new ArrayIterator([
        '/vendor/autoload.php',
        '/autoload.php',
    ])) ?? throw new \RuntimeException('Unable to resolve autoload.php');
})();
/**
 * Create Output stream for exception display.
 */
$output = new ConsoleOutput();

/**
 * Create the console Application instance.
 *
 * @var Application $app
 * @noinspection PhpUnhandledExceptionInspection
 *
 * @see          Application
 * @see          \Symfony\Component\Console\Application
 */
$app = container()->get('app');

/**
 * Run the Console Application
 * thrown Exceptions are caught and their messages are written to ConsoleOutput.
 */
try {
    $app->run(output: $output);
} catch (Exception $e) {
    $output->writeln($e->getMessage());

    return Command::FAILURE;
}

return Command::SUCCESS;
